<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Fixed Deposit Record</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        table { width: 100%; border-collapse: collapse; margin-top: 20px; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
        button { margin: 5px; }
        #accountHolderSelect { margin-bottom: 10px; }
        .interest-section { margin-top: 30px; border-top: 1px solid #ddd; padding-top: 20px; }
        .saved-interest-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }
        .saved-interest-table th, .saved-interest-table td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }
        .saved-interest-table th {
            background-color: #f2f2f2;
        }
    </style>
</head>
<body>
    <label>Account Holder Name: 
        <select id="accountHolderSelect" onchange="loadAccountRecords()">
        </select>
        <input type="text" id="newAccountHolder" placeholder="New Account Holder">
        <button onclick="addAccountHolder()">Add Account Holder</button>
    </label>
    <h2>Fixed Deposit Record - <span id="accountHolderNameDisplay"></span></h2>

    <label>Bank Name: 
        <select id="bankName">
            <option value="Nabil Bank">Nabil Bank</option>
            <option value="Nepal Investment Bank">Nepal Investment Bank</option>
            <option value="Standard Chartered Bank">Standard Chartered Bank</option>
            <option value="NIC Asia Bank">NIC Asia Bank</option>
            <option value="Himalayan Bank">Himalayan Bank</option>
            <option value="Global IME Bank">Global IME Bank</option>
            <option value="Siddhartha Bank">Siddhartha Bank</option>
            <option value="Prime Commercial Bank">Prime Commercial Bank</option>
            <option value="Everest Bank">Everest Bank</option>
            <option value="Citizens Bank">Citizens Bank</option>
            <option value="Sanima Bank">Sanima Bank</option>
            <option value="Kumari Bank">Kumari Bank</option>
            <option value="Laxmi Bank</option>
            <option value="Machhapuchchhre Bank">Machhapuchchhre Bank</option>
            <option value="Mega Bank">Mega Bank</option>
            <option value="Sunrise Bank">Sunrise Bank</option>
            <option value="NMB Bank">NMB Bank</option>
            <option value="Prabhu Bank">Prabhu Bank</option>
            <option value="Civil Bank">Civil Bank</option>
            <option value="Century Commercial Bank">Century Commercial Bank</option>
        </select>
    </label>
    <label>Amount: <input type="number" id="amount"></label>
    <label>Duration: <input type="number" id="duration">
        <select id="durationUnit">
            <option value="Days">Days</option>
            <option value="Months">Months</option>
            <option value="Years">Years</option>
        </select>
    </label>
    <label>Interest Rate (% per annum): <input type="number" id="interestRate" value="5"></label>
    <label>FD Start Date: <input type="date" id="fdStartDate"></label>
    
    <input type="hidden" id="editIndex">
    <button onclick="saveRecord()">Save Record</button>
    <button onclick="clearAllRecords()">Clear All</button>
    <button onclick="exportToExcel()">Export to Excel</button>
    <button onclick="importFromExcel()">Import from Excel</button>
    <button onclick="printPage()">Print</button>
    
    <table>
        <thead>
            <tr>
                <th>Bank Name</th>
                <th>Amount</th>
                <th>Duration</th>
                <th>Duration Unit</th>
                <th>Interest Rate</th>
                <th>FD Start Date</th>
                <th>FD Maturity Date</th>
                <th>FD Renewal Days Remaining</th>
                <th>Interest</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody id="records"></tbody>
    </table>

    <div class="interest-section">
        <h2>Interest Calculation</h2>
        <label>Select FD Record:
            <select id="fdRecordSelect" onchange="updateInterestFields()">
            </select>
        </label>
        <label>Bank Name: <input type="text" id="interestBankName" readonly></label>
        <label>Amount: <input type="number" id="interestAmount" readonly></label>
        <label>Interest Calculation Period:
            <select id="interestCalculationPeriod">
                <option value="monthly">Monthly</option>
                <option value="quarterly">Quarterly</option>
                <option value="whole">Whole FD Period</option>
                <option value="custom">Custom Date Range</option>
                <option value="fullCustom">Full Custom Input</option>
            </select>
        </label>
        <label id="customInterestAmountLabel">Amount: <input type="number" id="customInterestAmount"></label>
        <label id="customInterestRateLabel">Interest Rate (% per annum): <input type="number" id="customInterestRate"></label>
        <label id="customInterestDurationLabel">Duration: <input type="number" id="customInterestDuration"></label>
        <label id="customInterestDurationUnitLabel">
            <select id="customInterestDurationUnit">
                <option value="Days">Days</option>
                <option value="Months">Months</option>
                <option value="Years">Years</option>
            </select>
        </label>
        <label>From Date: <input type="date" id="interestFromDate"></label>
        <label>To Date: <input type="date" id="interestToDate"></label>
        <button onclick="calculateAndDisplayInterest()">Calculate Interest</button>
        <p>Calculated Interest: <span id="calculatedInterest">0</span></p>
        <div id="interestActions" style="display: none;">
            <button onclick="saveCalculatedInterest()">Save Interest</button>
            <button onclick="clearCalculatedInterest()">Skip Saving Interest</button>
        </div>
    </div>

    <div class="saved-interest-section">
        <h2>Saved Interest Records</h2>
        <table class="saved-interest-table">
            <thead>
                <tr>
                    <th>Account Holder</th>
                    <th>Bank Name</th>
                    <th>Amount</th>
                    <th>Interest Rate</th>
                    <th>Interest From Date</th>
                    <th>Interest To Date</th>
                    <th>Interest</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody id="savedInterestList">
            </tbody>
        </table>
        <button onclick="clearAllSavedInterest()">Clear All</button>
    </div>

    <script src="https://unpkg.com/xlsx/dist/xlsx.full.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            loadAccountHolders();
            // Initially hide custom inputs
            document.getElementById('customInterestAmountLabel').style.display = 'none';
            document.getElementById('customInterestRateLabel').style.display = 'none';
            document.getElementById('customInterestDurationLabel').style.display = 'none';
            document.getElementById('customInterestDurationUnitLabel').style.display = 'none';
            loadSavedInterest();
        });

        function getAccountHolders() {
            return JSON.parse(localStorage.getItem('accountHolders') || '[]');
        }

        function saveAccountHolders(accountHolders) {
            localStorage.setItem('accountHolders', JSON.stringify(accountHolders));
        }

        function loadAccountHolders() {
            const accountHolderSelect = document.getElementById('accountHolderSelect');
            accountHolderSelect.innerHTML = '';
            const accountHolders = getAccountHolders();
            accountHolders.forEach(holder => {
                const option = document.createElement('option');
                option.value = holder;
                option.textContent = holder;
                accountHolderSelect.appendChild(option);
            });
            if (accountHolders.length > 0) {
                accountHolderSelect.value = accountHolders[0];
                loadAccountRecords();
            } else {
                document.getElementById('accountHolderNameDisplay').textContent = "No Account Holder Selected";
                document.getElementById('records').innerHTML = '';
                document.getElementById('fdRecordSelect').innerHTML = '';
            }
        }

        function addAccountHolder() {
            const newAccountHolderInput = document.getElementById('newAccountHolder');
            const newAccountHolderName = newAccountHolderInput.value.trim();
            if (newAccountHolderName === "") return;

            const accountHolders = getAccountHolders();
            if (!accountHolders.includes(newAccountHolderName)) {
                accountHolders.push(newAccountHolderName);
                saveAccountHolders(accountHolders);
                loadAccountHolders();
                document.getElementById('accountHolderSelect').value = newAccountHolderName;
            }
            newAccountHolderInput.value = '';
            loadAccountRecords();
        }

        function getAccountRecords(accountHolderName) {
            try {
                const data = localStorage.getItem(accountHolderName);
                return data ? JSON.parse(data) : [];
            } catch (error) {
                console.error('Error getting account records:', error);
                return [];
            }
        }

        function saveAccountRecords(accountHolderName, records) {
            try {
                localStorage.setItem(accountHolderName, JSON.stringify(records));
            } catch (error) {
                console.error('Error saving account records:', error);
            }
        }

        function loadAccountRecords() {
            const accountHolderName = document.getElementById('accountHolderSelect').value;
            document.getElementById('accountHolderNameDisplay').textContent = accountHolderName;
            const records = getAccountRecords(accountHolderName);
            const tbody = document.getElementById('records');
            tbody.innerHTML = '';
            records.forEach((record, index) => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${record.bankName}</td>
                    <td>${record.amount}</td>
                    <td>${record.duration}</td>
                    <td>${record.durationUnit}</td>
                    <td>${record.interestRate}</td>
                    <td>${record.fdStartDate}</td>
                    <td>${record.fdMaturityDate}</td>
                    <td>${record.fdRenewalDaysRemaining}</td>
                    <td>${record.interest.toFixed(2)}</td>
                    <td>
                        <button onclick="editRecord('${accountHolderName}', ${index})">Edit</button>
                        <button onclick="deleteRecord('${accountHolderName}', ${index})">Delete</button>
                    </td>
                `;
                tbody.appendChild(row);
            });
            populateFDRecordSelect(records);
        }

        function calculateMaturityDate(startDate, duration, unit) {
            const date = new Date(startDate);
            let durationValue = parseInt(duration);
            if (unit === 'Days') {
                date.setDate(date.getDate() + durationValue);
            } else if (unit === 'Months') {
                date.setMonth(date.getMonth() + durationValue);
            } else if (unit === 'Years') {
                date.setFullYear(date.getFullYear() + durationValue);
            }
            return date.toLocaleDateString();
        }

        function calculateRenewalDaysRemaining(maturityDate) {
            const today = new Date();
            const maturity = new Date(maturityDate);
            const diffTime = maturity.getTime() - today.getTime();
            const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
            return diffDays;
        }

        function calculateInterest(amount, interestRate, duration, unit, fromDate, toDate) {
            let interest = 0;
            const principal = parseFloat(amount);
            const rate = parseFloat(interestRate) / 100;
            let days = 0;

            if (fromDate && toDate) {
                const start = new Date(fromDate);
                const end = new Date(toDate);
                days = Math.ceil((end - start) / (1000 * 60 * 60 * 24));
            } else if (unit === 'Days') {
                days = parseInt(duration);
            } else if (unit === 'Months') {
                days = parseInt(duration) * 30; 
            } else if (unit === 'Years') {
                days = parseInt(duration) * 365;
            }

            interest = (principal * rate * days) / 365;
            return interest;
        }

        function saveRecord() {
            const accountHolderName = document.getElementById('accountHolderSelect').value;
            const bankName = document.getElementById('bankName').value;
            const amount = document.getElementById('amount').value;
            const duration = document.getElementById('duration').value;
            const durationUnit = document.getElementById('durationUnit').value;
            const interestRate = document.getElementById('interestRate').value;
            const fdStartDate = document.getElementById('fdStartDate').value;
            const fdMaturityDate = calculateMaturityDate(fdStartDate, duration, durationUnit);
            const fdRenewalDaysRemaining = calculateRenewalDaysRemaining(fdMaturityDate);
            const interest = calculateInterest(amount, interestRate, duration, durationUnit);
            
            const record = {
                bankName,
                amount,
                duration,
                durationUnit,
                interestRate,
                fdStartDate,
                fdMaturityDate,
                fdRenewalDaysRemaining,
                interest
            };
            
            let records = getAccountRecords(accountHolderName);
            const editIndex = document.getElementById('editIndex').value;
            if (editIndex) {
                records[editIndex] = record;
            } else {
                records.push(record);
            }
            saveAccountRecords(accountHolderName, records);
            loadAccountRecords();
            clearInputs();
        }

        function editRecord(accountHolderName, index) {
            if (confirm("Are you sure you want to edit this record?")) {
                const records = getAccountRecords(accountHolderName);
                const record = records[index];
                document.getElementById('bankName').value = record.bankName;
                document.getElementById('amount').value = record.amount;
                document.getElementById('duration').value = record.duration;
                document.getElementById('durationUnit').value = record.durationUnit;
                document.getElementById('interestRate').value = record.interestRate;
                document.getElementById('fdStartDate').value = record.fdStartDate;
                document.getElementById('editIndex').value = index;
            }
        }

        function deleteRecord(accountHolderName, index) {
            if (confirm("Are you sure you want to delete this record?")) {
                let records = getAccountRecords(accountHolderName);
                records.splice(index, 1);
                saveAccountRecords(accountHolderName, records);
                loadAccountRecords();
            }
        }

        function clearInputs() {
            document.getElementById('bankName').value = '';
            document.getElementById('amount').value = '';
            document.getElementById('duration').value = '';
            document.getElementById('durationUnit').value = 'Days';
            document.getElementById('interestRate').value = '5';
            document.getElementById('fdStartDate').value = '';
            document.getElementById('editIndex').value = '';
        }

        function clearAllRecords() {
            if (confirm("Are you sure you want to clear all records for this account holder?")) {
                const accountHolderName = document.getElementById('accountHolderSelect').value;
                localStorage.removeItem(accountHolderName);
                loadAccountRecords();
            }
        }

        function populateFDRecordSelect(records) {
            const fdRecordSelect = document.getElementById('fdRecordSelect');
            fdRecordSelect.innerHTML = '';
            records.forEach((record, index) => {
                const option = document.createElement('option');
                option.value = index; 
                option.textContent = `${record.bankName} - ${record.amount}`;
                fdRecordSelect.appendChild(option);
            });
            if(records.length > 0) {
               updateInterestFields();
            } else {
                document.getElementById('interestBankName').value = '';
                document.getElementById('interestAmount').value = '';
            }
        }

        function updateInterestFields() {
            const accountHolderName = document.getElementById('accountHolderSelect').value;
            const records = getAccountRecords(accountHolderName);
            const fdRecordIndex = document.getElementById('fdRecordSelect').value;

            if (records && records[fdRecordIndex]) {
                const record = records[fdRecordIndex];
                document.getElementById('interestBankName').value = record.bankName;
                document.getElementById('interestAmount').value = record.amount;
            }
        }

        document.getElementById('interestCalculationPeriod').addEventListener('change', function() {
            const period = this.value;
            if (period === 'fullCustom') {
                document.getElementById('customInterestAmountLabel').style.display = 'block';
                document.getElementById('customInterestRateLabel').style.display = 'block';
                document.getElementById('customInterestDurationLabel').style.display = 'block';
                document.getElementById('customInterestDurationUnitLabel').style.display = 'block';
                document.getElementById('interestFromDate').style.display = 'none';
                document.getElementById('interestToDate').style.display = 'none';
            } else if (period === 'custom') {
                document.getElementById('customInterestAmountLabel').style.display = 'none';
                document.getElementById('customInterestRateLabel').style.display = 'none';
                document.getElementById('customInterestDurationLabel').style.display = 'none';
                document.getElementById('customInterestDurationUnitLabel').style.display = 'none';
                document.getElementById('interestFromDate').style.display = 'inline-block';
                document.getElementById('interestToDate').style.display = 'inline-block';
            } else {
                document.getElementById('customInterestAmountLabel').style.display = 'none';
                document.getElementById('customInterestRateLabel').style.display = 'none';
                document.getElementById('customInterestDurationLabel').style.display = 'none';
                document.getElementById('customInterestDurationUnitLabel').style.display = 'none';
                document.getElementById('interestFromDate').style.display = 'none';
                document.getElementById('interestToDate').style.display = 'none';
            }
        });

        let calculatedInterestValue = 0;
        let calculatedInterestRecord = {};
        function calculateAndDisplayInterest() {
            const accountHolderName = document.getElementById('accountHolderSelect').value;
            const records = getAccountRecords(accountHolderName);
            const fdRecordIndex = document.getElementById('fdRecordSelect').value;

            if (!records || records.length === 0) {
                document.getElementById('calculatedInterest').textContent = "No records found for this account holder.";
                document.getElementById('interestActions').style.display = 'none';
                return;
            }
            if (records && !records[fdRecordIndex]) {
                document.getElementById('calculatedInterest').textContent = "No FD Record Selected.";
                document.getElementById('interestActions').style.display = 'none';
                return;
            }
            const record = records[fdRecordIndex];

            let amount = record.amount;
            let interestRate = record.interestRate;
            let duration = record.duration;
            let unit = record.durationUnit;
            const period = document.getElementById('interestCalculationPeriod').value;
            const fromDate = document.getElementById('interestFromDate').value;
            const toDate = document.getElementById('interestToDate').value;

            if (period === 'fullCustom') {
                amount = parseFloat(document.getElementById('customInterestAmount').value);
                interestRate = parseFloat(document.getElementById('customInterestRate').value);
                duration = parseFloat(document.getElementById('customInterestDuration').value);
                unit = document.getElementById('customInterestDurationUnit').value;

                if (isNaN(amount) || isNaN(interestRate) || isNaN(duration)) {
                    document.getElementById('calculatedInterest').textContent = "Please enter valid values for Amount, Interest Rate, and Duration.";
                    document.getElementById('interestActions').style.display = 'none';
                    return;
                }
            }

            let interest = 0;
            let interestPeriod = "";

             if (period === 'monthly') {
                interest = calculateInterest(amount, interestRate, 1, 'Months');
                interestPeriod = "Monthly";
            } else if (period === 'quarterly') {
                interest = calculateInterest(amount, interestRate, 3, 'Months');
                interestPeriod = "Quarterly";
            } else if (period === 'whole') {
                interest = calculateInterest(amount, interestRate, duration, unit);
                interestPeriod = "Whole FD Period";
            } else if (period === 'custom') {
                if (!fromDate || !toDate) {
                    document.getElementById('calculatedInterest').textContent = "Please select both From and To dates.";
                    document.getElementById('interestActions').style.display = 'none';
                    return;
                }
                interest = calculateInterest(amount, interestRate, duration, unit, fromDate, toDate);
                interestPeriod = "Custom";
            } else if (period === 'fullCustom') {
                 interest = calculateInterest(amount, interestRate, duration, unit);
                 interestPeriod = "Full Custom";
            }

            calculatedInterestValue = interest.toFixed(2);
            document.getElementById('calculatedInterest').textContent = calculatedInterestValue;
            document.getElementById('interestActions').style.display = 'block';

            calculatedInterestRecord = {
                accountHolderName: accountHolderName,
                bankName: document.getElementById('interestBankName').value,
                amount: amount,
                interestRate: interestRate,
                interestFromDate: fromDate || record.fdStartDate, 
                interestToDate: toDate || record.fdMaturityDate,
                interest: calculatedInterestValue,
                interestPeriod: interestPeriod
            };
        }

        function getSavedInterest() {
            return JSON.parse(localStorage.getItem('savedInterest') || '[]');
        }

        function saveCalculatedInterest() {
            let savedInterestRecords = getSavedInterest();
            savedInterestRecords.push(calculatedInterestRecord);
            localStorage.setItem('savedInterest', JSON.stringify(savedInterestRecords));
            loadSavedInterest();
            document.getElementById('calculatedInterest').textContent = '0';
            document.getElementById('interestActions').style.display = 'none';
        }

        function loadSavedInterest() {
            const savedInterestList = document.getElementById('savedInterestList');
            savedInterestList.innerHTML = '';
            const savedInterestRecords = getSavedInterest();
            savedInterestRecords.forEach((record, index) => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${record.accountHolderName}</td>
                    <td>${record.bankName}</td>
                    <td>${record.amount}</td>
                    <td>${record.interestRate}</td>
                    <td>${record.interestFromDate}</td>
                    <td>${record.interestToDate}</td>
                    <td>${record.interest}</td>
                    <td>
                        <button onclick="editSavedInterest(${index})">Edit</button>
                        <button onclick="deleteSavedInterest(${index})">Delete</button>
                    </td>
                `;
                savedInterestList.appendChild(row);
            });
        }

        function clearCalculatedInterest() {
            document.getElementById('calculatedInterest').textContent = '0';
            document.getElementById('interestActions').style.display = 'none';
        }

        function editSavedInterest(index) {
            if (confirm("Are you sure you want to edit this saved interest record?")) {
                const savedInterestRecords = getSavedInterest();
                const record = savedInterestRecords[index];

                document.getElementById('accountHolderSelect').value = record.accountHolderName;
                document.getElementById('interestBankName').value = record.bankName;
                document.getElementById('interestAmount').value = record.amount;
                document.getElementById('customInterestAmount').value = record.amount; 
                document.getElementById('customInterestRate').value = record.interestRate;
                document.getElementById('interestFromDate').value = record.interestFromDate;
                document.getElementById('interestToDate').value = record.interestToDate;
                calculatedInterestValue = record.interest;
                document.getElementById('calculatedInterest').textContent = calculatedInterestValue;
                document.getElementById('interestActions').style.display = 'block';

                savedInterestRecords.splice(index, 1);
                localStorage.setItem('savedInterest', JSON.stringify(savedInterestRecords));
                loadSavedInterest();
            }
        }

        function deleteSavedInterest(index) {
            if (confirm("Are you sure you want to delete this saved interest record?")) {
                let savedInterestRecords = getSavedInterest();
                savedInterestRecords.splice(index, 1);
                localStorage.setItem('savedInterest', JSON.stringify(savedInterestRecords));
                loadSavedInterest();
            }
        }

        function clearAllSavedInterest() {
            if (confirm("Are you sure you want to clear all saved interest records?")) {
                localStorage.removeItem('savedInterest');loadSavedInterest();
            }
        }

        function exportToExcel() {
            const accountHolderName = document.getElementById('accountHolderSelect').value;
            const records = getAccountRecords(accountHolderName);
            if (!records || records.length === 0) {
                alert('No records to export.');
                return;
            }

            const data = records.map(record => ({
                'Bank Name': record.bankName,
                'Amount': record.amount,
                'Duration': record.duration,
                'Duration Unit': record.durationUnit,
                'Interest Rate': record.interestRate,
                'FD Start Date': record.fdStartDate,
                'FD Maturity Date': record.fdMaturityDate,
                'FD Renewal Days Remaining': record.fdRenewalDaysRemaining,
                'Interest': record.interest
            }));

            const worksheet = XLSX.utils.json_to_sheet(data);
            const workbook = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(workbook, worksheet, 'Fixed Deposit Records');
            XLSX.writeFile(workbook, `Fixed_Deposit_Records_${accountHolderName}.xlsx`);
        }

        function importFromExcel() {
            const input = document.createElement('input');
            input.type = 'file';
            input.accept = '.xlsx, .xls';
            input.onchange = function(event) {
                const file = event.target.files[0];
                const reader = new FileReader();
                reader.onload = function(e) {
                    const data = new Uint8Array(e.target.result);
                    const workbook = XLSX.read(data, { type: 'array' });
                    const worksheet = workbook.Sheets[workbook.SheetNames[0]];
                    const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });

                    if (!jsonData || jsonData.length <= 1) {
                        alert('Invalid or empty Excel file.');
                        return;
                    }

                    const header = jsonData[0];
                    const requiredHeaders = ['Bank Name', 'Amount', 'Duration', 'Duration Unit', 'Interest Rate', 'FD Start Date'];
                    const headerCheck = requiredHeaders.every(requiredHeader => header.includes(requiredHeader));

                    if (!headerCheck) {
                        alert('Invalid Excel file.  Missing required headers: Bank Name, Amount, Duration, Duration Unit, Interest Rate, FD Start Date');
                        return;
                    }

                    const records = jsonData.slice(1).map(row => {
                        const record = {};
                        header.forEach((key, index) => {
                            record[key] = row[index];
                        });
                         const fdMaturityDate = calculateMaturityDate(record['FD Start Date'], record['Duration'], record['Duration Unit']);
                         const fdRenewalDaysRemaining = calculateRenewalDaysRemaining(fdMaturityDate);
                         const interest = calculateInterest(record['Amount'], record['Interest Rate'], record['Duration'], record['Duration Unit']);
                        return {
                            bankName: record['Bank Name'],
                            amount: record['Amount'],
                            duration: record['Duration'],
                            durationUnit: record['Duration Unit'],
                            interestRate: record['Interest Rate'],
                            fdStartDate: record['FD Start Date'],
                            fdMaturityDate: fdMaturityDate,
                            fdRenewalDaysRemaining: fdRenewalDaysRemaining,
                            interest: interest
                        };
                    });

                    const accountHolderName = document.getElementById('accountHolderSelect').value;
                    let existingRecords = getAccountRecords(accountHolderName);
                    const combinedRecords = [...existingRecords, ...records];
                    saveAccountRecords(accountHolderName, combinedRecords);
                    loadAccountRecords();
                };
                reader.readAsArrayBuffer(file);
            };
            input.click();
        }

        function printPage() {
            window.print();
        }
    </script>
</body>
</html>
